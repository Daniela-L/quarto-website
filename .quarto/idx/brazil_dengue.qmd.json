{"title":"Preprocessing Dengue Data","markdown":{"yaml":{"title":"Preprocessing Dengue Data","author":"Daniela Luhrsen, Rachel Lowe and Raquel Lana","date":"2022-10-27","output":"github_document","editor_options":{"chunk_output_type":"console"},"message":true,"editor":{"markdown":{"wrap":80}}},"headingText":"Setting up the R environment","containsRefs":false,"markdown":"\n\nThis document aims at introducing dengue data to someone with no previous\nexperience. Before starting it is necessary to have the health data,\ninstructions on how to obtain these are in the ReadMe of this project.\n\nThe steps include:\n\n1.  Downloading the data\n2.  Getting to know the data: detect differences between different datasets\n3.  Information on the patients: Age, Sex, Pregnancy, Race\n4.  Information on the case: classification, confirmation criteria, dengue\n    category, exam type, evolution of the case\n5.  Timeline of the dengue case: distribution throughout the year, duration of\n    cases, course of the disease\n6.  Mapping spatially: Absolute cases, incidence\n\nAlong the way, each topic will be divided into 3:\n\n-   ![](images/idea-02.png){width=\"25\"} indicates that you will learn something\n\n-   ![](images/eye-01.png){width=\"24\"} indicates that you will see the data in a\n    plot\n\n-   ![](images/filter-01.png){width=\"20\"} indicates that there is a opportunity\n    to filter data (if necessary).\n\n\n![](images/idea-02.png){width=\"25\"} In every R script,\n\nIn this script we will need the following R-scripts:\n\n-   microdatasus: To download the health data from brazil\n\n-   foreign: this function is used to read dbf files\n\n-   read.dbc: to open the files in .dbc format\n\n-   readr: to open csv files\n\n-   purrr:\n\n-   ggplot2: to create the graphs\n\n-   lubridate: to help format the dates\n\n-   geobr: to download the shapefiles of brazils administrative boundaries\n\n-   stringr: to support string modifications\n\n-   patchwork:\n\n-   knitr: to create interactive tables\n\n-   scales: to rescale continuous vectors to have limits\n\n-   dplyr & tidyr: to use functions from the \"tidyverse\"\n\nOther options that are being set up now include, setting a maximum waiting time\nfor functions (i.e. timeout), how large numbers should be displayed (i.e.\nscipen) and functions are locally loaded.\n\n```{r, warning= FALSE, message=FALSE}\n#load packages\npackages  <- c(\"microdatasus\", \"foreign\", \"read.dbc\", \"readr\", \"dplyr\", \"purrr\",\n               \"ggplot2\",\"lubridate\",\"geobr\", \"stringr\", \"patchwork\",\n               \"arsenal\", \"knitr\", \"scales\", \"tidyr\")\ninvisible(install.packages(setdiff(packages, rownames(installed.packages()))))\ninvisible(lapply(packages, function(pkg) suppressMessages(require(pkg, character.only = TRUE))))\n\n# set options\noptions(scipen = 999)\noptions(timeout = 2000)\n\n# load functions\nfiles.sources <-  list.files(\"R/\")\ninvisible(sapply(paste0(\"R/\", files.sources), source))\n\n```\n\n# Download the data by microdatasus\n\nAs described in the [download instructions](brazil_download_data.qmd), the\nhealth data from Brazil can be downloaded by many different methods:\n*microdatasus*, PySUS or by Filezilla [FTP link](ftp.datasus.gov.br). In this\nscript, the data will be downloaded with the help of the package\n[*microdatasus*](https://rfsaldanha.github.io/microdatasus/), the following code\nblock is an example that will download the data for the year 2015. The dengue\ndatabase is heavy and it can take time to download it. It is therefor\nrecommended to download the data once and save it to your computer. Afterwards\nyou can load it from your local disk every time you want to analyse it.\n\nIn the case of this script, run it the first code block once (with the second\ncode block commented out), and then you can comment out the first code block and\nuncomment the first code block.\n\n```{r Dengue_Load, message = FALSE, warning = FALSE}\n# den15 <- fetch_datasus(year_start = 2015, year_end = 2015, information_system = \"SINAN-DENGUE\")\n```\n\n<!--#  Sometimes problems with the variables occur when downloading data from mutiple years (e.g. 2012 to 2015). The developer are already aware of this. For now, download each year one by one, then import all years using bind_rows and use an argument to import all variables as a character.-->\n\n```{r}\nden15 <- readRDS(\"data/den15.rds\")\n```\n\n#### Understanding the data structure\n\n![](images/idea-02.png){width=\"25\"} Specifically, it contains 139 variables, the\nexplanation for each variable can be found on the [SINAN\nwebpage](portalsinan.saude.gov.br/images/documentos/Agravos/Dengue/DIC_DADOS_ONLINE.pdf)\nfrom the Ministry of Health of Brazil. However, it is only available in\nPortuguese. A translation into English can be found in [this csv\nfile](Workspace/Dictionary_Dengue.csv). This file also contains the\ndecodification for all numerical categories. A small overview of this file can\nbe seen below:\n\n```{r Dengue_Dictionary,  message=FALSE}\nvarEng <- readr::read_csv(\"workspace/Dictionary_Dengue.csv\")\nknitr::kable(head(varEng[,1:4]))\n```\n\nSome of these variables are mandatory to notify, others are not, which leads to\nincomplete datasets. The dataframe **NAcount** shows the percentage of NA-values\nfor each variable, below you can see it graphically for some of the variables.\nHere, we chose as the main database to explore the variables, den15, a database\nyou can download by the FTP link.\n\n```{r}\nNAcount <- den15 %>% purrr::map(~mean(is.na(.)))\nNAcount <- data.frame(unlist(NAcount))\nNAcount[\"var\"] <- rownames(NAcount)\n```\n\n![](images/eye-01.png){width=\"24\"} You can visualise it here.\n\n```{r Dengue_NACount}\np <- ggplot2::ggplot(NAcount[35:55,], aes(x = reorder(var, unlist.NAcount.), y = unlist.NAcount.))+\n  geom_bar(stat = \"identity\", width = 0.9, position = position_dodge(width = 5))+\n  ylab(\"Percentage of NAs in each column\")+\n  xlab(\"Variables\")\np + coord_flip()\n```\n\nThe variables with complete datasets are:\n\n```{r Dengue_Complete}\nNAcount$var[NAcount$unlist.NAcount. == 0]\n```\n\n![](images/filter-01.png){width=\"20\"} To avoid working with unnecessary data, it\nis useful to filter out the variables that will not be used. Below is a line of\ncode on how to select only the needed variables.\n\nChange this list as needed!\n\n```{r Dengue_SelectVariables}\nsel_var <- c(\"DT_NOTIFIC\",  \"ID_MUNICIP\",  \"DT_SIN_PRI\", \"DT_NASC\", \"NU_IDADE_N\", \n             \"CS_SEXO\", \"CS_GESTANT\", \"CS_RACA\", \"ID_MN_RESI\",  \"COMUNINF\", \n             \"CLASSI_FIN\", \"CRITERIO\",  \"EVOLUCAO\", \"DT_OBITO\", \"DT_SORO\",  \n             \"DT_ENCERRA\", \"RES_CHIKS1\",\"RES_CHIKS2\", \"RESUL_PRNT\",\"RESUL_SORO\",\"RESUL_NS1\",\n             \"RESUL_VI_N\", \"RESUL_PCR_\",\"HISTOPA_N\",\"IMUNOH_N\", \"MUNICIPIO\")\n\nden15 <- den15 %>% dplyr::select(dplyr::all_of(sel_var))\n```\n\n````{=html}\n<!-- ### VER Ver duplicados antes aqui, ver a comparaçao entre os dados do\nFTP e solicitados. Parece que precisa de data de nascimento para deduplicar.\nProbably we can't deduplicate the files from FTP. Check well the files from the\nMS. There is library in Python that can help\nhttps://pypi.org/project/pandas-dedupe/. ver 2015, esse veio do ministério \n```{Checking duplicated registers}\n# Filtro: duplicidade ----\n# den15 %>%\n#   distinct(NU_NOTIFIC, DT_NOTIFIC, ID_MUNICIP, .keep_all = T) %>% dplyr::count()\n#\n# den15 %>%\n#   distinct(NU_NOTIFIC, DT_NOTIFIC, ID_MUNICIP, DT_NASC, ID_UNIDADE, .keep_all = T) %>% dplyr::count()\n```\n--\\>\n\n<!-- DL: Tego que terminar esto -->\n````\n\n# Information on the patient\n\n### *Age*\n\n![](images/idea-02.png){width=\"25\"} For dengue, there are two methods to obtain\nthe age of the patients. First, using the data about the patients birth-date,\nwhich is provided in the variable **DT_NASC**. The age can be calculated by\nsubtracting the birth-date from the notification date.\n\n```{r}\nden15 <- den15 %>%\n    dplyr::mutate(AGE_BIRTHDAY =\n             ifelse(format(den15$DT_NASC, \"%m-%d\") > format(den15$DT_NOTIFIC, \"%m-%d\"),\n                    lubridate::year(den15$DT_NOTIFIC)-lubridate::year(den15$DT_NASC)-1,\n                    lubridate::year(den15$DT_NOTIFIC)-lubridate::year(den15$DT_NASC)))\n```\n\n![](images/eye-01.png){width=\"24\"} You can visualise it here:\n\n```{r Dengue_AgeBirthday, warning=FALSE}\nggplot2::ggplot(den15, aes(x = AGE_BIRTHDAY))+\n  geom_histogram(binwidth = 1, fill = \"lightblue\",color=\"black\", alpha = 0.7)+\n  annotate(\"text\", x = 100, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$AGE_BIRTHDAY)), \" NA values\"))+\n  labs(x=\"Age [years]\", y=\"Count\", title=\"Age distribution according to the birthday field\")+\n  theme_light()\n```\n\n![](images/idea-02.png){width=\"25\"} However, **DT_NASC** is not a mandatory\nvariable, thus, there are many missing values. Instead, **NU_IDADE_N** can be\nused. **NU_IDADE_N** is codified as follows:\n\n-   the first number indicates what \"dimension\" it is using. 1= Hour, 2= day, 3=\n    month, 4= year.\n-   the last numbers indicate the age. The age can be \"decodified\" with the\n    below command line.\n\n```{r Dengue_AgeCode, warning=FALSE}\nden15  <- den15 %>%\n  dplyr::mutate(AGE_CODE = dplyr::case_when(NU_IDADE_N < 120 ~ as.numeric(NU_IDADE_N), # assumes that non-codified data means that the age in years was given\n                           NU_IDADE_N >= 120 & NU_IDADE_N < 1000 ~ NA_real_,\n                           NU_IDADE_N >= 1000 & NU_IDADE_N < 2366 ~ 0,\n                           NU_IDADE_N >= 2366 & NU_IDADE_N < 3000 ~ NA_real_,\n                           NU_IDADE_N >= 3000 & NU_IDADE_N < 3013 ~ 0,\n                           NU_IDADE_N >= 3013 & NU_IDADE_N < 4000 ~ NA_real_,\n                           NU_IDADE_N >= 4000 & NU_IDADE_N < 4120 ~ as.numeric(NU_IDADE_N - 4000),\n                           NU_IDADE_N >= 4120 ~ NA_real_,\n                           TRUE ~ NA_real_))\n\nggplot2::ggplot(den15[den15$AGE_CODE < 120,], aes(x = AGE_CODE))+\n  geom_histogram(binwidth = 1, fill = \"lightblue\",color=\"black\", alpha = 0.7)+\n  annotate(\"text\", x = 100, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$AGE_CODE)), \" NA values\"))+\n  labs(x=\"Age [years]\", y=\"Count\",\n       title=\"Age distribution according to the codified age field\")+\n  theme_light()\n```\n\nThe two histograms are very similar, however there is a noticeable difference in\nthe amount of people aged 0. Below are the first few lines of cases where the\ntwo calculated ages differ:\n\n```{r Dengue_AgeDecode1}\ncompare_age <- den15[(den15$AGE_BIRTHDAY - den15$AGE_CODE) >1,] %>%\n  dplyr::select(DT_NASC, NU_IDADE_N, AGE_CODE, AGE_BIRTHDAY)\nknitr::kable(head(compare_age[!is.na(compare_age$DT_NASC),]))\n```\n\n![](images/filter-01.png){width=\"20\"} There are many people with an age code of\n0, but with an birthdate, that indicates a different age. Another common way to\nfilter inconsistencies is to discard people above the age of 120.\n\n<!-- Introduce line of code to filter. -->\n\n### *Sex of the patients*\n\n![](images/idea-03.png){width=\"23\"} The sex of the patients is given by\n**CS_SEXO**.\n\n```{r}\nden15 <- den15 %>%\n  dplyr::mutate(CS_SEXO = as.factor(dplyr::case_when(CS_SEXO == \"F\" ~ \"Female\",\n                                       CS_SEXO == \"M\" ~ \"Male\",\n                                       CS_SEXO == \"I\" ~ \"Ignored\",\n                                       TRUE ~ \"NA\")))\n```\n\n![Learn](images/eye.png){width=\"30\"} A bar plot of its distribution can be seen\nbelow:\n\n```{r Dengue_Sex}\nggplot2::ggplot(den15, aes(x = CS_SEXO, fill=CS_SEXO))+\n  geom_bar()+\n  ggtitle(\"Sex distribution of dengue cases in 2015\")+\n  labs(x = \"Sex of the patient\", y = \"Count\", fill=\"Sex\")+\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$CS_SEXO)), \" NA values\"))+\n  theme_light()\n\n```\n\n### *Pregnancy*\n\n![](images/idea-03.png){width=\"23\"} Another related variable is **CS_GESTANT**,\nwhich indicates whether the patient is pregnant. Since only women below a\ncertain age can get pregnant this is another way to check for inconsistencies.\n\n```{r Dengue_Pregnancy}\npregnant <- den15 %>%\n  dplyr::filter((CS_GESTANT == 1 | CS_GESTANT == 2 | CS_GESTANT ==3 | CS_GESTANT == 4)) %>%\n  dplyr::count()\n\nmpreg <- den15 %>%\n  dplyr::filter(CS_SEXO == \"M\" & (CS_GESTANT == 1 | CS_GESTANT == 2 | CS_GESTANT ==3 | CS_GESTANT == 4)) %>%\n  dplyr::count()\n\npover50 <- den15 %>%\n  dplyr::filter(AGE_CODE > 50 & (CS_GESTANT == 1 | CS_GESTANT == 2 | CS_GESTANT ==3 | CS_GESTANT == 4)) %>%\n  dplyr::count()\n\n```\n\n![Filter](images/filter.png){width=\"20\"} Out of `r pregnant` pregnant patients,\nthere are `r mpreg` pregnant males and `r pover50` pregnant women over the age\nof 50. Again, depending on the aim of the study, these patients could be\nexcluded using the following line.\n\n```{r Dengue_Sex_Filter}\nden15 <- den15 %>%\n  dplyr::filter(!(CS_GESTANT %in% c(\"1\", \"2\", \"3\", \"4\") & CS_SEXO == \"M\") & \n           !(CS_GESTANT %in% c(\"1\", \"2\", \"3\", \"4\") & AGE_CODE > 50))\n```\n\n### *Race/Color of the patients*\n\n![Learn](images/idea.png){alt=\"Learn\" width=\"20\"} The race/color of the patient\nis given by **CS_RACA**.\n\n```{r Dengue_Race}\nden15 <- den15 %>%\n    dplyr::mutate(CS_RACA = as.factor(dplyr::case_when(CS_RACA == 1 ~ \"White\",\n                                       CS_RACA == 2 ~ \"Black\",\n                                       CS_RACA == 3 ~ \"Yellow\",\n                                       CS_RACA == 4 ~ \"Brown\",\n                                       CS_RACA == 5 ~ \"Indigenous\",\n                                       CS_RACA == 9 ~ \"Ignored\",\n                                       TRUE ~ \"NA\")))\n\n\n\n```\n\n![](images/eye.png){alt=\"Learn\" width=\"30\"}\n\n```{r Dengue_Race_Visualise}\nggplot2::ggplot(den15, aes(x = CS_RACA, fill=CS_RACA)) +\n  geom_bar() +\n  ggtitle(\"Race/Color distribution of dengue cases in 2015\") +\n  geom_text(stat = 'count',\n            aes(label = paste0(round((after_stat(count))/sum(after_stat(count)) * 100, 1), \"%\"),\n                x = CS_RACA),\n            position = position_stack(vjust = 0.5)) +\n  labs(x=\"Race/Color of the patient\", y=\"Count\",fill=\"Race/Color\")\n```\n\nNote the amount of missing values and ignored for race/color.\n\n# Information on the cases\n\n### *Classification of the dengue cases*\n\n![Learn](images/idea.png){width=\"20\"} This database collects all the\n**suspected** cases of dengue, however, not all suspected cases are considered\nas probable or confirmed. The variable **CLASSI_FIN** gives insight about the\nfinal classification and severity of each case. It is important to note that\nsince 2015 there are new classification rules, consequently the codification of\nthis variables changed too. Before 2015 the numbers 1-5 were used, and now 5-13\n(5 always meing \"discarded\"). The code is as follows:\n\n1 - Classic Dengue Fever 2 - Severe Dengue 3 - Dengue Hemorrhagic Fever - DHF\n4 - Dengue Shock Syndrome 5 - Discarded 8 - Inconclusive 10 - Dengue 11 - Dengue\nwith warning signs) 12 - Severe Dengue 13 - Chikungunya\n\n```{r Dengue_Classification_learn}\nclassification <- den15 %>%\n   dplyr::mutate(\n     CLASSI_FIN = as.factor(dplyr::case_when(CLASSI_FIN == 1 ~ \"Dengue\",\n                                      CLASSI_FIN == 2 ~ \"Severe Dengue\",\n                                      CLASSI_FIN == 3 ~ \"Dengue Hemorrhagic Fever\",\n                                      CLASSI_FIN == 4 ~ \"Dengue Shock Syndrome\",\n                                      CLASSI_FIN == 5 ~ \"Discarded\",\n                                      CLASSI_FIN == 8 ~ \"Inconclusive\",\n                                      CLASSI_FIN == 10 ~ \"Dengue\",\n                                      CLASSI_FIN == 11 ~ \"Dengue with \\nwarning signals\",\n                                      CLASSI_FIN == 12 ~ \"Severe Dengue\",\n                                      CLASSI_FIN == 13 ~ \"Chikungunya\",\n                                      TRUE ~ \"NA\")))\n```\n\n![](images/eye.png){alt=\"Learn\" width=\"30\"}\n\n```{r Dengue_Classification_Visualise}\nggplot2::ggplot(classification) +\n  geom_bar(aes(x = CLASSI_FIN, fill=CLASSI_FIN)) +\n  geom_text(stat = 'count',\n            aes(label = paste0(round((after_stat(count))/sum(after_stat(count)) * 100, 1), \"%\"),\n                x = CLASSI_FIN),\n            position = position_stack(vjust = 0.5)) +\n  labs(x=\"Classification category\",\n       y=\"Count\",\n       title=\"Final classification of dengue cases in 2015\",\n       fill= \"Classification\")+\n  theme_minimal()\n```\n\n![Filter](images/filter.png){alt=\"Filter\" width=\"20\"} Almost\n`r round(sum(classification$CLASSI_FIN == \"Discarded\")/nrow(classification) * 100, 1)`%\nof the cases in 2015 were **discarded**. If a study only considers **probable**\ndengue cases, these discarded cases, as well as those without classification,\nshould be discarded.\n\n### *Confirmation criteria of the cases*\n\n![Learn](images/idea.png){alt=\"Learn\" width=\"20\"} It can be of interest how the\ndengue case are confirmed. Information about the type of confirmation can be\nextracted from the variable **CRITERIO**. In Brazil there are three different\noptions:\n\n-   laboratory exams\n-   clinical epidemiological, which means that a physician talked to the\n    patient.\n-   Unknown\n\n```{r}\ncriteria <-  den15 %>%\n  dplyr::count(CRITERIO, name = \"count\") %>%\n  dplyr::mutate(percentage = prop.table(count),\n         category = c(\"Laboratory\", \"Clinical epidimiological\",\"Under investigation\",\"Unknown\"))\n```\n\n```{r Dengue_ConfirmationCriteria}\nggplot2::ggplot(criteria, aes(x = category, y = count, fill = category)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(percentage * 100, 1), \"%\")),\n            position = position_stack(vjust = 0.5)) +\n  labs(x = \"Confirmation criteria\",\n       y = \"Count\",\n       title = \"Confirmation criteria of dengue cases in 2015\",\n       fill = \"Confirmation Criteria\") +\n  theme_minimal()\n```\n\n`r round(criteria$percentage[criteria$category == \"Clinical epidimiological\"]*100,1)`%\nof the cases were confirmed/discarded via the criteria of *clinical\nepiediomogical*, and\n`r round(criteria$percentage[criteria$category == \"Laboratory\"]*100, 1)`% via\n*laboratory exams*. A detailed description of which exams are tipically used can\nbe seen in the [exam type section](####exam-type).\n\n![Filter](images/filter.png){alt=\"Filter\" width=\"20\"} If you are interest solely\nin **confirmed** cases, then all cases with unknown or missing criteria have to\nbe dismissed.\n\n### *Categories of dengue*\n\n![Learn](images/idea.png){alt=\"Learn\" width=\"20\"} Based on its classification\nand confirmation criterium, dengue cases can be categorized into 4 different\ncategories. They have been mentioned in the previous sections, but for clarity\nthey are listed and defined here again:\n\n-   *Suspect cases*: all notifications.\n-   *Confirmed cases*: dengue cases confirmed by laboratory or\n    clinic-epidemiological criteria.\n-   *Probable cases*: dengue cases discarding missing values and discarded\n    category of the CLASSI_FIN variable.\n-   *Discarded* category of the CLASSI_FIN variable.\n\n### *Exam type*\n\n![](images/idea-03.png){width=\"23\"} In the case of confirmation via *laboratory\nexams*, there are 9 different possible exams. Each exam has its own variable,\nwith a numerical code that indicates its result:\n\n1.  means the result of the exam is positive\n2.  means the result of the exam is negative\n3.  means the result of the exam is inconclusive\n4.  means the exam was not realized\n\n```{r Dengue_Examtype}\nexams <- den15 %>%\n  dplyr::filter(CRITERIO == 1) %>%\n  dplyr::summarise('Serological exam 1 (Chikungunya)' = sum(!is.na(RES_CHIKS1) & RES_CHIKS1 != 4 ),\n            'Serological exam 2 (Chikungunya)' = sum(!is.na(RES_CHIKS2) & RES_CHIKS2 != 4),\n            'PRNT exam' = sum(!is.na(RESUL_PRNT) & RESUL_PRNT != 4),\n            'Serological exam (dengue)' = sum(!is.na(RESUL_SORO) & RESUL_SORO != 4),\n            'NS1 exam' = sum(!is.na(RESUL_NS1) & RESUL_NS1 != 4),\n            'Viral isolation' = sum(!is.na(RESUL_VI_N) & RESUL_VI_N != 4),\n            'PCR exam' = sum(!is.na(RESUL_PCR_) & RESUL_PCR_ != 4),\n            'Histopatology exam' = sum(!is.na(HISTOPA_N) & HISTOPA_N != 4),\n            'Immunohistochemistry exam' = sum(!is.na(IMUNOH_N) & IMUNOH_N != 4))\nexams <-  data.frame(var= colnames(exams), val= t(exams))\n```\n\n```{r}\nggplot2::ggplot(exams, aes(x = var, y = val, fill=val)) +\n  geom_bar(stat = \"identity\",aes(reorder(var, val), val)) +\n  ggtitle(\"Frequency of each lab exam performed for dengue cases in 2015\") +\n  xlab(\"Exams\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))+\n  ylab(\"Count\")\n```\n\nAs can be seen, the serological exam is by far the most used one, followed by\nNS1. The other exams are hardly used.\n\n### *Evolution of case*\n\n![](images/idea-03.png){width=\"23\"} Finally, the variable **EVOLUCAO** defines\nthe outcome of each dengue case.\n\n```{r Dengue_Evolution}\nevolution <- den15 %>%\n   dplyr::mutate(\n     EVOLUCAO = as.factor(dplyr::case_when(EVOLUCAO == 1 ~ \"Cured\",\n                                    EVOLUCAO == 2 ~ \"Death by \\nillness\",\n                                    EVOLUCAO == 3 ~ \"Death by \\nother cause\",\n                                    EVOLUCAO == 4 ~ \"Death under \\ninvestigation\",\n                                    EVOLUCAO == 9 ~ \"Ignored\",\n                                    TRUE ~ \"NA\")))\n\nggplot2::ggplot(evolution) +\n  geom_bar(aes(x = EVOLUCAO, fill= EVOLUCAO)) +\n  geom_text(stat = 'count',\n            aes(label = paste0(round((after_stat(count))/sum(after_stat(count)) * 100, 1), \"%\"),\n                x = EVOLUCAO),\n            position = position_stack(vjust = 0.5)) +\n  labs(x=\"Category\", y = \"Count\", fill=\"Category\", title=\"Final outcomes of dengue cases in 2015\" )\n```\n\n# Timeline of dengue cases\n\n### *Notification distribution throughout the year*\n\n![](images/idea-03.png){width=\"23\"} The date of the first time that a potential\ndengue patient contacts the medical authorities is recorded as **DT_NOTIF**.\nThis variable can be used to see clear temporal patterns throughout the year.\nBelow, there is the annual distribution of dengue notifications in 2015, plotted\nat a temporal resolution of epidemiological week. In an epidemiological week,\nthe week starts on Sunday.\n\n```{r Dengue_NotificationTS}\ndengueEpiWeek <- den15 %>%\n  dplyr::mutate(epiweek = paste0(sprintf(\"%02d\",lubridate::epiweek(DT_NOTIFIC)), \"-2015\")) %>%\n  dplyr::group_by(epiweek) %>%\n  dplyr::summarise(count = dplyr::n()) %>%\n  dplyr::select(epiweek, count)\n```\n\n```{r}\nggplot2::ggplot(dengueEpiWeek, aes(x = epiweek, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"lightblue\", color=\"darkgrey\",alpha = 0.7)+\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$DT_NOTIFIC)), \" NA values\")) +\n  theme_minimal() +\n  labs(title = \"Suspected dengue cases in 2015 by epiweek\",\n       x = \"Epiweek\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n```\n\nThere is a clear seasonal variation, with the peak presenting itself in the\nmiddle of the Autumn season in Brazil.\n\n### *Duration of each dengue case*\n\n![](images/idea-03.png){width=\"23\"} Once the initial notification happens, the\ntimeline of each case starts. The duration of the complete process is delimited\nby the \"closing date\" (**DT_ENCERRA**). Below is a histogram to see the duration\nof each dengue case.\n\n```{r Dengue_Duration}\nduration <- as.numeric(den15$DT_ENCERRA - den15$DT_NOTIFIC)\n```\n\n```{r}\nggplot2::ggplot(data.frame(duration = duration[duration < 100]), aes(x = duration)) +\n  geom_histogram(bins = 100, fill = \"lightblue\",color=\"black\", alpha = 0.7)+\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$DT_ENCERRA)), \" NA values\")) +\n  labs(title = \"Duration from notification to closing of the case\",\n       x = \"Time [days]\",\n       y = \"Count\")\n```\n\nThere is an extremely large amount of cases that end on the 61st day, to be\nspecific\n`r round(sum(duration == 61 , na.rm = TRUE)/length(duration) * 100,2)`%. Only\n`r round(sum(duration > 61, na.rm = TRUE)/length(duration) * 100,2)`% of the\ncase take longer than 61 days.\n\n### *Timeline of all other events*\n\n![](images/idea-03.png){width=\"23\"} There are many dates recorded to be able ti\nunderstand the course of the disease. First, symptoms occur (**DT_SIN_PRI**),\nthis occurs before the notification date. Once the doctor notified a dengue\nsuspicion (**DT_NOTIF**) the case needs to be confirmed via an exams, this\nshould happen shortly after the notification. Finally, there must be a closing\ndate (**DT_ENCERRA**) or date of death (**DT_OBITO**). Both of these have to be\nafter the notification date.\n\n```{r Dengue_Timeline, warning=FALSE}\ntime <- data.frame(A_SYMP = as.numeric(den15$DT_SIN_PRI - den15$DT_NOTIFIC),\n                   B_SORO = as.numeric(den15$DT_SORO - den15$DT_NOTIFIC),\n                   C_DEAD = as.numeric(den15$DT_OBITO - den15$DT_NOTIFIC),\n                   D_TOTAL = as.numeric(den15$DT_ENCERRA - den15$DT_NOTIFIC))\nlong <- tidyr::gather(time, TYPE, DAYS, A_SYMP:D_TOTAL)\n```\n\n```{r}\nggplot2::ggplot(long, aes(x = TYPE, y = DAYS)) +\n  geom_boxplot() +\n  coord_cartesian(ylim = c(-100, 100)) +\n  labs(x=\"Event\",\n       y=\"Days from the notification day\",\n       title=\"\") +\n  scale_x_discrete(labels = c(\"First Symptoms\", \"Sorological Exam\", \"Death\", \"Case closed\"))\n```\n\n![](images/filter-01.png){width=\"20\"} Most dates should fall within a few days\nbefore the notification day or within two months after it. However, looking at\nthe boxplots, this is clearly not the case. If one wants to work with the\ntimeline of dengue cases, these erroneous cases need to be removed, e.g. someone\ndying before the notification date or someone having their first symptoms on the\n`r min(den15$DT_SIN_PRI, na.rm=T)`.\n\n# Mapping spatially\n\n### *Absolute cases*\n\n![](images/idea-03.png){width=\"23\"} There is of course also spatial data in the\ndatasets. Before beginning the analysis, it is necessary to download the\nshapefiles of Brazils municipalities. This can be done via the *geobr* package\n(more info on this in 0_DownloadData.md). However, the municipality code given\nby geobr is one digit too long and has to be shortened to 6 digits.\n\n```{r  Dengue_LoadMuni, message=FALSE, warning=FALSE}\nmuni <- geobr::read_municipality(code_muni = \"all\", year = 2015, showProgress = FALSE) %>%\n  dplyr::mutate(code_muni = stringr::str_sub(code_muni, end = 6))\n```\n\nIn total, the dataset refers to 4 different locations:\n\n-   **ID_MUNICIP** is the municipality where the case is recorded.\n-   **ID_MN_RESI** is the municipality of residence of the patient.\n-   **COMUNINF** is the probable municipality of infection.\n-   **MUNICIPIO** is the municipality of the hospital (if hospitalized).\n\n```{r  Dengue_Plot, message = FALSE, warning = FALSE}\nnoti <- as.data.frame(table(den15$ID_MUNICIP, dnn = list(\"code_muni\")), responseName = \"noti_muni\")\ninfec <- as.data.frame(table(den15$COMUNINF, dnn = list(\"code_muni\")), responseName = \"infec_muni\")\nresi <- as.data.frame(table(den15$ID_MN_RESI, dnn = list(\"code_muni\")), responseName = \"resi_muni\")\nhosp <- as.data.frame(table(den15$MUNICIPIO, dnn = list(\"code_muni\")), responseName = \"hosp_muni\")\n\nallmuni <- dplyr::left_join(muni, noti) %>%\n  dplyr::left_join(., infec) %>%\n  dplyr::left_join(., resi) %>%\n  dplyr::left_join(., hosp)\n\ncols <- c(\"green\", \"yellow\",\"orange\",\"red\", \"black\")\nbreaks <- c(0,10,100,1000,10000,100000)\nnoti <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Notification municipality\")+\n  geom_sf( aes(fill=noti_muni), size=.15, show.legend = TRUE) +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\ninfec <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Probable infections municipality\")+\n  geom_sf( aes(fill=infec_muni), size=.15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\nresi <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Residence municipality\")+\n  geom_sf( aes(fill=resi_muni), size=.15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\nhosp <- ggplot(allmuni) +\n  ggtitle(\"Hospitalizations municipality\")+\n  geom_sf( aes(fill=hosp_muni), size=.15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\n#using the patchwork library, the plots can be displayed next to each other\n(noti+infec)/(resi+hosp)\n```\n\nDepending on the aim of the study, different variables can be important. For\nexample, if your work aims to understand the dengue prevalence, the municipality\nof residence is the most suitable. However, if you need to evaluate the\nhealthcare infrastructure, the municipality of hospitalisation could be more\nsuitable.\n\n### *Calculate the incidence*\n\n![](images/idea-03.png){width=\"23\"} Sometimes, having the absolute values is\nhelpful. But other times, the number of dengue cases are highly dependent on the\nnumber of inhabitants and then the incidence is used. The incidence describes\nhow many dengue cases occurred per 100.000 inhabitants.\n\nFor this, the population data needs to be loaded from\n[IBGE](https://www.ibge.gov.br/estatisticas/sociais/populacao/9103-estimativas-de-populacao.html?edicao=31551&t=resultados)\neither manually or using the local function \"get_br_pop_data\" (instructions can\nbe viewed in 0_DownloadData.md).\n\n```{r Dengue_LoadPopulation}\nget_br_pop_data(2015, save=F)\n\nallmuni <-  dplyr::left_join(allmuni, pop_2015[c(\"code_muni\",\"pop\")], by=\"code_muni\")\nallmuni$pop <- as.numeric(allmuni$pop)\n```\n\nThe incidence is then calculated by dividing the dengue cases by the population\nof each municipality and multiplicating it by 100.000.\n\n```{r  Dengue_Incidence, message=FALSE, warning=FALSE}\nallmuni$noti_inc <- allmuni$noti_muni / allmuni$pop * 100000\nallmuni$infec_inc <- allmuni$infec_muni / allmuni$pop * 100000\nallmuni$resi_inc <- allmuni$resi_muni / allmuni$pop * 100000\nallmuni$hosp_inc <- allmuni$hosp_muni / allmuni$pop * 100000\n\n# Population\nggplot2::ggplot(allmuni) +\n  ggtitle(\"Population in Brazil\")+\n  geom_sf( aes(fill = pop), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\n# Incidence\nbreaks2 <- c(0,5,25,50,100, 250)\nnoti_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of dengue notifications in 2015\")+\n  geom_sf( aes(fill = noti_inc), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\ninfec_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of probable dengue infections in 2015\")+\n  geom_sf( aes(fill = infec_inc), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\nresi_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of residents with dengue in 2015\")+\n  geom_sf( aes(fill = resi_inc), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\nhosp_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of dengue hospitalizations in 2015\")+\n  geom_sf( aes(fill = hosp_inc), size = .15, show.legend = TRUE) +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\n\n(noti_inc+infec_inc)/(resi_inc+hosp_inc)\n```\n","srcMarkdownNoYaml":"\n\nThis document aims at introducing dengue data to someone with no previous\nexperience. Before starting it is necessary to have the health data,\ninstructions on how to obtain these are in the ReadMe of this project.\n\nThe steps include:\n\n1.  Downloading the data\n2.  Getting to know the data: detect differences between different datasets\n3.  Information on the patients: Age, Sex, Pregnancy, Race\n4.  Information on the case: classification, confirmation criteria, dengue\n    category, exam type, evolution of the case\n5.  Timeline of the dengue case: distribution throughout the year, duration of\n    cases, course of the disease\n6.  Mapping spatially: Absolute cases, incidence\n\nAlong the way, each topic will be divided into 3:\n\n-   ![](images/idea-02.png){width=\"25\"} indicates that you will learn something\n\n-   ![](images/eye-01.png){width=\"24\"} indicates that you will see the data in a\n    plot\n\n-   ![](images/filter-01.png){width=\"20\"} indicates that there is a opportunity\n    to filter data (if necessary).\n\n# Setting up the R environment\n\n![](images/idea-02.png){width=\"25\"} In every R script,\n\nIn this script we will need the following R-scripts:\n\n-   microdatasus: To download the health data from brazil\n\n-   foreign: this function is used to read dbf files\n\n-   read.dbc: to open the files in .dbc format\n\n-   readr: to open csv files\n\n-   purrr:\n\n-   ggplot2: to create the graphs\n\n-   lubridate: to help format the dates\n\n-   geobr: to download the shapefiles of brazils administrative boundaries\n\n-   stringr: to support string modifications\n\n-   patchwork:\n\n-   knitr: to create interactive tables\n\n-   scales: to rescale continuous vectors to have limits\n\n-   dplyr & tidyr: to use functions from the \"tidyverse\"\n\nOther options that are being set up now include, setting a maximum waiting time\nfor functions (i.e. timeout), how large numbers should be displayed (i.e.\nscipen) and functions are locally loaded.\n\n```{r, warning= FALSE, message=FALSE}\n#load packages\npackages  <- c(\"microdatasus\", \"foreign\", \"read.dbc\", \"readr\", \"dplyr\", \"purrr\",\n               \"ggplot2\",\"lubridate\",\"geobr\", \"stringr\", \"patchwork\",\n               \"arsenal\", \"knitr\", \"scales\", \"tidyr\")\ninvisible(install.packages(setdiff(packages, rownames(installed.packages()))))\ninvisible(lapply(packages, function(pkg) suppressMessages(require(pkg, character.only = TRUE))))\n\n# set options\noptions(scipen = 999)\noptions(timeout = 2000)\n\n# load functions\nfiles.sources <-  list.files(\"R/\")\ninvisible(sapply(paste0(\"R/\", files.sources), source))\n\n```\n\n# Download the data by microdatasus\n\nAs described in the [download instructions](brazil_download_data.qmd), the\nhealth data from Brazil can be downloaded by many different methods:\n*microdatasus*, PySUS or by Filezilla [FTP link](ftp.datasus.gov.br). In this\nscript, the data will be downloaded with the help of the package\n[*microdatasus*](https://rfsaldanha.github.io/microdatasus/), the following code\nblock is an example that will download the data for the year 2015. The dengue\ndatabase is heavy and it can take time to download it. It is therefor\nrecommended to download the data once and save it to your computer. Afterwards\nyou can load it from your local disk every time you want to analyse it.\n\nIn the case of this script, run it the first code block once (with the second\ncode block commented out), and then you can comment out the first code block and\nuncomment the first code block.\n\n```{r Dengue_Load, message = FALSE, warning = FALSE}\n# den15 <- fetch_datasus(year_start = 2015, year_end = 2015, information_system = \"SINAN-DENGUE\")\n```\n\n<!--#  Sometimes problems with the variables occur when downloading data from mutiple years (e.g. 2012 to 2015). The developer are already aware of this. For now, download each year one by one, then import all years using bind_rows and use an argument to import all variables as a character.-->\n\n```{r}\nden15 <- readRDS(\"data/den15.rds\")\n```\n\n#### Understanding the data structure\n\n![](images/idea-02.png){width=\"25\"} Specifically, it contains 139 variables, the\nexplanation for each variable can be found on the [SINAN\nwebpage](portalsinan.saude.gov.br/images/documentos/Agravos/Dengue/DIC_DADOS_ONLINE.pdf)\nfrom the Ministry of Health of Brazil. However, it is only available in\nPortuguese. A translation into English can be found in [this csv\nfile](Workspace/Dictionary_Dengue.csv). This file also contains the\ndecodification for all numerical categories. A small overview of this file can\nbe seen below:\n\n```{r Dengue_Dictionary,  message=FALSE}\nvarEng <- readr::read_csv(\"workspace/Dictionary_Dengue.csv\")\nknitr::kable(head(varEng[,1:4]))\n```\n\nSome of these variables are mandatory to notify, others are not, which leads to\nincomplete datasets. The dataframe **NAcount** shows the percentage of NA-values\nfor each variable, below you can see it graphically for some of the variables.\nHere, we chose as the main database to explore the variables, den15, a database\nyou can download by the FTP link.\n\n```{r}\nNAcount <- den15 %>% purrr::map(~mean(is.na(.)))\nNAcount <- data.frame(unlist(NAcount))\nNAcount[\"var\"] <- rownames(NAcount)\n```\n\n![](images/eye-01.png){width=\"24\"} You can visualise it here.\n\n```{r Dengue_NACount}\np <- ggplot2::ggplot(NAcount[35:55,], aes(x = reorder(var, unlist.NAcount.), y = unlist.NAcount.))+\n  geom_bar(stat = \"identity\", width = 0.9, position = position_dodge(width = 5))+\n  ylab(\"Percentage of NAs in each column\")+\n  xlab(\"Variables\")\np + coord_flip()\n```\n\nThe variables with complete datasets are:\n\n```{r Dengue_Complete}\nNAcount$var[NAcount$unlist.NAcount. == 0]\n```\n\n![](images/filter-01.png){width=\"20\"} To avoid working with unnecessary data, it\nis useful to filter out the variables that will not be used. Below is a line of\ncode on how to select only the needed variables.\n\nChange this list as needed!\n\n```{r Dengue_SelectVariables}\nsel_var <- c(\"DT_NOTIFIC\",  \"ID_MUNICIP\",  \"DT_SIN_PRI\", \"DT_NASC\", \"NU_IDADE_N\", \n             \"CS_SEXO\", \"CS_GESTANT\", \"CS_RACA\", \"ID_MN_RESI\",  \"COMUNINF\", \n             \"CLASSI_FIN\", \"CRITERIO\",  \"EVOLUCAO\", \"DT_OBITO\", \"DT_SORO\",  \n             \"DT_ENCERRA\", \"RES_CHIKS1\",\"RES_CHIKS2\", \"RESUL_PRNT\",\"RESUL_SORO\",\"RESUL_NS1\",\n             \"RESUL_VI_N\", \"RESUL_PCR_\",\"HISTOPA_N\",\"IMUNOH_N\", \"MUNICIPIO\")\n\nden15 <- den15 %>% dplyr::select(dplyr::all_of(sel_var))\n```\n\n````{=html}\n<!-- ### VER Ver duplicados antes aqui, ver a comparaçao entre os dados do\nFTP e solicitados. Parece que precisa de data de nascimento para deduplicar.\nProbably we can't deduplicate the files from FTP. Check well the files from the\nMS. There is library in Python that can help\nhttps://pypi.org/project/pandas-dedupe/. ver 2015, esse veio do ministério \n```{Checking duplicated registers}\n# Filtro: duplicidade ----\n# den15 %>%\n#   distinct(NU_NOTIFIC, DT_NOTIFIC, ID_MUNICIP, .keep_all = T) %>% dplyr::count()\n#\n# den15 %>%\n#   distinct(NU_NOTIFIC, DT_NOTIFIC, ID_MUNICIP, DT_NASC, ID_UNIDADE, .keep_all = T) %>% dplyr::count()\n```\n--\\>\n\n<!-- DL: Tego que terminar esto -->\n````\n\n# Information on the patient\n\n### *Age*\n\n![](images/idea-02.png){width=\"25\"} For dengue, there are two methods to obtain\nthe age of the patients. First, using the data about the patients birth-date,\nwhich is provided in the variable **DT_NASC**. The age can be calculated by\nsubtracting the birth-date from the notification date.\n\n```{r}\nden15 <- den15 %>%\n    dplyr::mutate(AGE_BIRTHDAY =\n             ifelse(format(den15$DT_NASC, \"%m-%d\") > format(den15$DT_NOTIFIC, \"%m-%d\"),\n                    lubridate::year(den15$DT_NOTIFIC)-lubridate::year(den15$DT_NASC)-1,\n                    lubridate::year(den15$DT_NOTIFIC)-lubridate::year(den15$DT_NASC)))\n```\n\n![](images/eye-01.png){width=\"24\"} You can visualise it here:\n\n```{r Dengue_AgeBirthday, warning=FALSE}\nggplot2::ggplot(den15, aes(x = AGE_BIRTHDAY))+\n  geom_histogram(binwidth = 1, fill = \"lightblue\",color=\"black\", alpha = 0.7)+\n  annotate(\"text\", x = 100, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$AGE_BIRTHDAY)), \" NA values\"))+\n  labs(x=\"Age [years]\", y=\"Count\", title=\"Age distribution according to the birthday field\")+\n  theme_light()\n```\n\n![](images/idea-02.png){width=\"25\"} However, **DT_NASC** is not a mandatory\nvariable, thus, there are many missing values. Instead, **NU_IDADE_N** can be\nused. **NU_IDADE_N** is codified as follows:\n\n-   the first number indicates what \"dimension\" it is using. 1= Hour, 2= day, 3=\n    month, 4= year.\n-   the last numbers indicate the age. The age can be \"decodified\" with the\n    below command line.\n\n```{r Dengue_AgeCode, warning=FALSE}\nden15  <- den15 %>%\n  dplyr::mutate(AGE_CODE = dplyr::case_when(NU_IDADE_N < 120 ~ as.numeric(NU_IDADE_N), # assumes that non-codified data means that the age in years was given\n                           NU_IDADE_N >= 120 & NU_IDADE_N < 1000 ~ NA_real_,\n                           NU_IDADE_N >= 1000 & NU_IDADE_N < 2366 ~ 0,\n                           NU_IDADE_N >= 2366 & NU_IDADE_N < 3000 ~ NA_real_,\n                           NU_IDADE_N >= 3000 & NU_IDADE_N < 3013 ~ 0,\n                           NU_IDADE_N >= 3013 & NU_IDADE_N < 4000 ~ NA_real_,\n                           NU_IDADE_N >= 4000 & NU_IDADE_N < 4120 ~ as.numeric(NU_IDADE_N - 4000),\n                           NU_IDADE_N >= 4120 ~ NA_real_,\n                           TRUE ~ NA_real_))\n\nggplot2::ggplot(den15[den15$AGE_CODE < 120,], aes(x = AGE_CODE))+\n  geom_histogram(binwidth = 1, fill = \"lightblue\",color=\"black\", alpha = 0.7)+\n  annotate(\"text\", x = 100, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$AGE_CODE)), \" NA values\"))+\n  labs(x=\"Age [years]\", y=\"Count\",\n       title=\"Age distribution according to the codified age field\")+\n  theme_light()\n```\n\nThe two histograms are very similar, however there is a noticeable difference in\nthe amount of people aged 0. Below are the first few lines of cases where the\ntwo calculated ages differ:\n\n```{r Dengue_AgeDecode1}\ncompare_age <- den15[(den15$AGE_BIRTHDAY - den15$AGE_CODE) >1,] %>%\n  dplyr::select(DT_NASC, NU_IDADE_N, AGE_CODE, AGE_BIRTHDAY)\nknitr::kable(head(compare_age[!is.na(compare_age$DT_NASC),]))\n```\n\n![](images/filter-01.png){width=\"20\"} There are many people with an age code of\n0, but with an birthdate, that indicates a different age. Another common way to\nfilter inconsistencies is to discard people above the age of 120.\n\n<!-- Introduce line of code to filter. -->\n\n### *Sex of the patients*\n\n![](images/idea-03.png){width=\"23\"} The sex of the patients is given by\n**CS_SEXO**.\n\n```{r}\nden15 <- den15 %>%\n  dplyr::mutate(CS_SEXO = as.factor(dplyr::case_when(CS_SEXO == \"F\" ~ \"Female\",\n                                       CS_SEXO == \"M\" ~ \"Male\",\n                                       CS_SEXO == \"I\" ~ \"Ignored\",\n                                       TRUE ~ \"NA\")))\n```\n\n![Learn](images/eye.png){width=\"30\"} A bar plot of its distribution can be seen\nbelow:\n\n```{r Dengue_Sex}\nggplot2::ggplot(den15, aes(x = CS_SEXO, fill=CS_SEXO))+\n  geom_bar()+\n  ggtitle(\"Sex distribution of dengue cases in 2015\")+\n  labs(x = \"Sex of the patient\", y = \"Count\", fill=\"Sex\")+\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$CS_SEXO)), \" NA values\"))+\n  theme_light()\n\n```\n\n### *Pregnancy*\n\n![](images/idea-03.png){width=\"23\"} Another related variable is **CS_GESTANT**,\nwhich indicates whether the patient is pregnant. Since only women below a\ncertain age can get pregnant this is another way to check for inconsistencies.\n\n```{r Dengue_Pregnancy}\npregnant <- den15 %>%\n  dplyr::filter((CS_GESTANT == 1 | CS_GESTANT == 2 | CS_GESTANT ==3 | CS_GESTANT == 4)) %>%\n  dplyr::count()\n\nmpreg <- den15 %>%\n  dplyr::filter(CS_SEXO == \"M\" & (CS_GESTANT == 1 | CS_GESTANT == 2 | CS_GESTANT ==3 | CS_GESTANT == 4)) %>%\n  dplyr::count()\n\npover50 <- den15 %>%\n  dplyr::filter(AGE_CODE > 50 & (CS_GESTANT == 1 | CS_GESTANT == 2 | CS_GESTANT ==3 | CS_GESTANT == 4)) %>%\n  dplyr::count()\n\n```\n\n![Filter](images/filter.png){width=\"20\"} Out of `r pregnant` pregnant patients,\nthere are `r mpreg` pregnant males and `r pover50` pregnant women over the age\nof 50. Again, depending on the aim of the study, these patients could be\nexcluded using the following line.\n\n```{r Dengue_Sex_Filter}\nden15 <- den15 %>%\n  dplyr::filter(!(CS_GESTANT %in% c(\"1\", \"2\", \"3\", \"4\") & CS_SEXO == \"M\") & \n           !(CS_GESTANT %in% c(\"1\", \"2\", \"3\", \"4\") & AGE_CODE > 50))\n```\n\n### *Race/Color of the patients*\n\n![Learn](images/idea.png){alt=\"Learn\" width=\"20\"} The race/color of the patient\nis given by **CS_RACA**.\n\n```{r Dengue_Race}\nden15 <- den15 %>%\n    dplyr::mutate(CS_RACA = as.factor(dplyr::case_when(CS_RACA == 1 ~ \"White\",\n                                       CS_RACA == 2 ~ \"Black\",\n                                       CS_RACA == 3 ~ \"Yellow\",\n                                       CS_RACA == 4 ~ \"Brown\",\n                                       CS_RACA == 5 ~ \"Indigenous\",\n                                       CS_RACA == 9 ~ \"Ignored\",\n                                       TRUE ~ \"NA\")))\n\n\n\n```\n\n![](images/eye.png){alt=\"Learn\" width=\"30\"}\n\n```{r Dengue_Race_Visualise}\nggplot2::ggplot(den15, aes(x = CS_RACA, fill=CS_RACA)) +\n  geom_bar() +\n  ggtitle(\"Race/Color distribution of dengue cases in 2015\") +\n  geom_text(stat = 'count',\n            aes(label = paste0(round((after_stat(count))/sum(after_stat(count)) * 100, 1), \"%\"),\n                x = CS_RACA),\n            position = position_stack(vjust = 0.5)) +\n  labs(x=\"Race/Color of the patient\", y=\"Count\",fill=\"Race/Color\")\n```\n\nNote the amount of missing values and ignored for race/color.\n\n# Information on the cases\n\n### *Classification of the dengue cases*\n\n![Learn](images/idea.png){width=\"20\"} This database collects all the\n**suspected** cases of dengue, however, not all suspected cases are considered\nas probable or confirmed. The variable **CLASSI_FIN** gives insight about the\nfinal classification and severity of each case. It is important to note that\nsince 2015 there are new classification rules, consequently the codification of\nthis variables changed too. Before 2015 the numbers 1-5 were used, and now 5-13\n(5 always meing \"discarded\"). The code is as follows:\n\n1 - Classic Dengue Fever 2 - Severe Dengue 3 - Dengue Hemorrhagic Fever - DHF\n4 - Dengue Shock Syndrome 5 - Discarded 8 - Inconclusive 10 - Dengue 11 - Dengue\nwith warning signs) 12 - Severe Dengue 13 - Chikungunya\n\n```{r Dengue_Classification_learn}\nclassification <- den15 %>%\n   dplyr::mutate(\n     CLASSI_FIN = as.factor(dplyr::case_when(CLASSI_FIN == 1 ~ \"Dengue\",\n                                      CLASSI_FIN == 2 ~ \"Severe Dengue\",\n                                      CLASSI_FIN == 3 ~ \"Dengue Hemorrhagic Fever\",\n                                      CLASSI_FIN == 4 ~ \"Dengue Shock Syndrome\",\n                                      CLASSI_FIN == 5 ~ \"Discarded\",\n                                      CLASSI_FIN == 8 ~ \"Inconclusive\",\n                                      CLASSI_FIN == 10 ~ \"Dengue\",\n                                      CLASSI_FIN == 11 ~ \"Dengue with \\nwarning signals\",\n                                      CLASSI_FIN == 12 ~ \"Severe Dengue\",\n                                      CLASSI_FIN == 13 ~ \"Chikungunya\",\n                                      TRUE ~ \"NA\")))\n```\n\n![](images/eye.png){alt=\"Learn\" width=\"30\"}\n\n```{r Dengue_Classification_Visualise}\nggplot2::ggplot(classification) +\n  geom_bar(aes(x = CLASSI_FIN, fill=CLASSI_FIN)) +\n  geom_text(stat = 'count',\n            aes(label = paste0(round((after_stat(count))/sum(after_stat(count)) * 100, 1), \"%\"),\n                x = CLASSI_FIN),\n            position = position_stack(vjust = 0.5)) +\n  labs(x=\"Classification category\",\n       y=\"Count\",\n       title=\"Final classification of dengue cases in 2015\",\n       fill= \"Classification\")+\n  theme_minimal()\n```\n\n![Filter](images/filter.png){alt=\"Filter\" width=\"20\"} Almost\n`r round(sum(classification$CLASSI_FIN == \"Discarded\")/nrow(classification) * 100, 1)`%\nof the cases in 2015 were **discarded**. If a study only considers **probable**\ndengue cases, these discarded cases, as well as those without classification,\nshould be discarded.\n\n### *Confirmation criteria of the cases*\n\n![Learn](images/idea.png){alt=\"Learn\" width=\"20\"} It can be of interest how the\ndengue case are confirmed. Information about the type of confirmation can be\nextracted from the variable **CRITERIO**. In Brazil there are three different\noptions:\n\n-   laboratory exams\n-   clinical epidemiological, which means that a physician talked to the\n    patient.\n-   Unknown\n\n```{r}\ncriteria <-  den15 %>%\n  dplyr::count(CRITERIO, name = \"count\") %>%\n  dplyr::mutate(percentage = prop.table(count),\n         category = c(\"Laboratory\", \"Clinical epidimiological\",\"Under investigation\",\"Unknown\"))\n```\n\n```{r Dengue_ConfirmationCriteria}\nggplot2::ggplot(criteria, aes(x = category, y = count, fill = category)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(percentage * 100, 1), \"%\")),\n            position = position_stack(vjust = 0.5)) +\n  labs(x = \"Confirmation criteria\",\n       y = \"Count\",\n       title = \"Confirmation criteria of dengue cases in 2015\",\n       fill = \"Confirmation Criteria\") +\n  theme_minimal()\n```\n\n`r round(criteria$percentage[criteria$category == \"Clinical epidimiological\"]*100,1)`%\nof the cases were confirmed/discarded via the criteria of *clinical\nepiediomogical*, and\n`r round(criteria$percentage[criteria$category == \"Laboratory\"]*100, 1)`% via\n*laboratory exams*. A detailed description of which exams are tipically used can\nbe seen in the [exam type section](####exam-type).\n\n![Filter](images/filter.png){alt=\"Filter\" width=\"20\"} If you are interest solely\nin **confirmed** cases, then all cases with unknown or missing criteria have to\nbe dismissed.\n\n### *Categories of dengue*\n\n![Learn](images/idea.png){alt=\"Learn\" width=\"20\"} Based on its classification\nand confirmation criterium, dengue cases can be categorized into 4 different\ncategories. They have been mentioned in the previous sections, but for clarity\nthey are listed and defined here again:\n\n-   *Suspect cases*: all notifications.\n-   *Confirmed cases*: dengue cases confirmed by laboratory or\n    clinic-epidemiological criteria.\n-   *Probable cases*: dengue cases discarding missing values and discarded\n    category of the CLASSI_FIN variable.\n-   *Discarded* category of the CLASSI_FIN variable.\n\n### *Exam type*\n\n![](images/idea-03.png){width=\"23\"} In the case of confirmation via *laboratory\nexams*, there are 9 different possible exams. Each exam has its own variable,\nwith a numerical code that indicates its result:\n\n1.  means the result of the exam is positive\n2.  means the result of the exam is negative\n3.  means the result of the exam is inconclusive\n4.  means the exam was not realized\n\n```{r Dengue_Examtype}\nexams <- den15 %>%\n  dplyr::filter(CRITERIO == 1) %>%\n  dplyr::summarise('Serological exam 1 (Chikungunya)' = sum(!is.na(RES_CHIKS1) & RES_CHIKS1 != 4 ),\n            'Serological exam 2 (Chikungunya)' = sum(!is.na(RES_CHIKS2) & RES_CHIKS2 != 4),\n            'PRNT exam' = sum(!is.na(RESUL_PRNT) & RESUL_PRNT != 4),\n            'Serological exam (dengue)' = sum(!is.na(RESUL_SORO) & RESUL_SORO != 4),\n            'NS1 exam' = sum(!is.na(RESUL_NS1) & RESUL_NS1 != 4),\n            'Viral isolation' = sum(!is.na(RESUL_VI_N) & RESUL_VI_N != 4),\n            'PCR exam' = sum(!is.na(RESUL_PCR_) & RESUL_PCR_ != 4),\n            'Histopatology exam' = sum(!is.na(HISTOPA_N) & HISTOPA_N != 4),\n            'Immunohistochemistry exam' = sum(!is.na(IMUNOH_N) & IMUNOH_N != 4))\nexams <-  data.frame(var= colnames(exams), val= t(exams))\n```\n\n```{r}\nggplot2::ggplot(exams, aes(x = var, y = val, fill=val)) +\n  geom_bar(stat = \"identity\",aes(reorder(var, val), val)) +\n  ggtitle(\"Frequency of each lab exam performed for dengue cases in 2015\") +\n  xlab(\"Exams\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))+\n  ylab(\"Count\")\n```\n\nAs can be seen, the serological exam is by far the most used one, followed by\nNS1. The other exams are hardly used.\n\n### *Evolution of case*\n\n![](images/idea-03.png){width=\"23\"} Finally, the variable **EVOLUCAO** defines\nthe outcome of each dengue case.\n\n```{r Dengue_Evolution}\nevolution <- den15 %>%\n   dplyr::mutate(\n     EVOLUCAO = as.factor(dplyr::case_when(EVOLUCAO == 1 ~ \"Cured\",\n                                    EVOLUCAO == 2 ~ \"Death by \\nillness\",\n                                    EVOLUCAO == 3 ~ \"Death by \\nother cause\",\n                                    EVOLUCAO == 4 ~ \"Death under \\ninvestigation\",\n                                    EVOLUCAO == 9 ~ \"Ignored\",\n                                    TRUE ~ \"NA\")))\n\nggplot2::ggplot(evolution) +\n  geom_bar(aes(x = EVOLUCAO, fill= EVOLUCAO)) +\n  geom_text(stat = 'count',\n            aes(label = paste0(round((after_stat(count))/sum(after_stat(count)) * 100, 1), \"%\"),\n                x = EVOLUCAO),\n            position = position_stack(vjust = 0.5)) +\n  labs(x=\"Category\", y = \"Count\", fill=\"Category\", title=\"Final outcomes of dengue cases in 2015\" )\n```\n\n# Timeline of dengue cases\n\n### *Notification distribution throughout the year*\n\n![](images/idea-03.png){width=\"23\"} The date of the first time that a potential\ndengue patient contacts the medical authorities is recorded as **DT_NOTIF**.\nThis variable can be used to see clear temporal patterns throughout the year.\nBelow, there is the annual distribution of dengue notifications in 2015, plotted\nat a temporal resolution of epidemiological week. In an epidemiological week,\nthe week starts on Sunday.\n\n```{r Dengue_NotificationTS}\ndengueEpiWeek <- den15 %>%\n  dplyr::mutate(epiweek = paste0(sprintf(\"%02d\",lubridate::epiweek(DT_NOTIFIC)), \"-2015\")) %>%\n  dplyr::group_by(epiweek) %>%\n  dplyr::summarise(count = dplyr::n()) %>%\n  dplyr::select(epiweek, count)\n```\n\n```{r}\nggplot2::ggplot(dengueEpiWeek, aes(x = epiweek, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"lightblue\", color=\"darkgrey\",alpha = 0.7)+\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$DT_NOTIFIC)), \" NA values\")) +\n  theme_minimal() +\n  labs(title = \"Suspected dengue cases in 2015 by epiweek\",\n       x = \"Epiweek\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n```\n\nThere is a clear seasonal variation, with the peak presenting itself in the\nmiddle of the Autumn season in Brazil.\n\n### *Duration of each dengue case*\n\n![](images/idea-03.png){width=\"23\"} Once the initial notification happens, the\ntimeline of each case starts. The duration of the complete process is delimited\nby the \"closing date\" (**DT_ENCERRA**). Below is a histogram to see the duration\nof each dengue case.\n\n```{r Dengue_Duration}\nduration <- as.numeric(den15$DT_ENCERRA - den15$DT_NOTIFIC)\n```\n\n```{r}\nggplot2::ggplot(data.frame(duration = duration[duration < 100]), aes(x = duration)) +\n  geom_histogram(bins = 100, fill = \"lightblue\",color=\"black\", alpha = 0.7)+\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1, vjust = 1, size = 4,\n           label = paste0(sum(is.na(den15$DT_ENCERRA)), \" NA values\")) +\n  labs(title = \"Duration from notification to closing of the case\",\n       x = \"Time [days]\",\n       y = \"Count\")\n```\n\nThere is an extremely large amount of cases that end on the 61st day, to be\nspecific\n`r round(sum(duration == 61 , na.rm = TRUE)/length(duration) * 100,2)`%. Only\n`r round(sum(duration > 61, na.rm = TRUE)/length(duration) * 100,2)`% of the\ncase take longer than 61 days.\n\n### *Timeline of all other events*\n\n![](images/idea-03.png){width=\"23\"} There are many dates recorded to be able ti\nunderstand the course of the disease. First, symptoms occur (**DT_SIN_PRI**),\nthis occurs before the notification date. Once the doctor notified a dengue\nsuspicion (**DT_NOTIF**) the case needs to be confirmed via an exams, this\nshould happen shortly after the notification. Finally, there must be a closing\ndate (**DT_ENCERRA**) or date of death (**DT_OBITO**). Both of these have to be\nafter the notification date.\n\n```{r Dengue_Timeline, warning=FALSE}\ntime <- data.frame(A_SYMP = as.numeric(den15$DT_SIN_PRI - den15$DT_NOTIFIC),\n                   B_SORO = as.numeric(den15$DT_SORO - den15$DT_NOTIFIC),\n                   C_DEAD = as.numeric(den15$DT_OBITO - den15$DT_NOTIFIC),\n                   D_TOTAL = as.numeric(den15$DT_ENCERRA - den15$DT_NOTIFIC))\nlong <- tidyr::gather(time, TYPE, DAYS, A_SYMP:D_TOTAL)\n```\n\n```{r}\nggplot2::ggplot(long, aes(x = TYPE, y = DAYS)) +\n  geom_boxplot() +\n  coord_cartesian(ylim = c(-100, 100)) +\n  labs(x=\"Event\",\n       y=\"Days from the notification day\",\n       title=\"\") +\n  scale_x_discrete(labels = c(\"First Symptoms\", \"Sorological Exam\", \"Death\", \"Case closed\"))\n```\n\n![](images/filter-01.png){width=\"20\"} Most dates should fall within a few days\nbefore the notification day or within two months after it. However, looking at\nthe boxplots, this is clearly not the case. If one wants to work with the\ntimeline of dengue cases, these erroneous cases need to be removed, e.g. someone\ndying before the notification date or someone having their first symptoms on the\n`r min(den15$DT_SIN_PRI, na.rm=T)`.\n\n# Mapping spatially\n\n### *Absolute cases*\n\n![](images/idea-03.png){width=\"23\"} There is of course also spatial data in the\ndatasets. Before beginning the analysis, it is necessary to download the\nshapefiles of Brazils municipalities. This can be done via the *geobr* package\n(more info on this in 0_DownloadData.md). However, the municipality code given\nby geobr is one digit too long and has to be shortened to 6 digits.\n\n```{r  Dengue_LoadMuni, message=FALSE, warning=FALSE}\nmuni <- geobr::read_municipality(code_muni = \"all\", year = 2015, showProgress = FALSE) %>%\n  dplyr::mutate(code_muni = stringr::str_sub(code_muni, end = 6))\n```\n\nIn total, the dataset refers to 4 different locations:\n\n-   **ID_MUNICIP** is the municipality where the case is recorded.\n-   **ID_MN_RESI** is the municipality of residence of the patient.\n-   **COMUNINF** is the probable municipality of infection.\n-   **MUNICIPIO** is the municipality of the hospital (if hospitalized).\n\n```{r  Dengue_Plot, message = FALSE, warning = FALSE}\nnoti <- as.data.frame(table(den15$ID_MUNICIP, dnn = list(\"code_muni\")), responseName = \"noti_muni\")\ninfec <- as.data.frame(table(den15$COMUNINF, dnn = list(\"code_muni\")), responseName = \"infec_muni\")\nresi <- as.data.frame(table(den15$ID_MN_RESI, dnn = list(\"code_muni\")), responseName = \"resi_muni\")\nhosp <- as.data.frame(table(den15$MUNICIPIO, dnn = list(\"code_muni\")), responseName = \"hosp_muni\")\n\nallmuni <- dplyr::left_join(muni, noti) %>%\n  dplyr::left_join(., infec) %>%\n  dplyr::left_join(., resi) %>%\n  dplyr::left_join(., hosp)\n\ncols <- c(\"green\", \"yellow\",\"orange\",\"red\", \"black\")\nbreaks <- c(0,10,100,1000,10000,100000)\nnoti <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Notification municipality\")+\n  geom_sf( aes(fill=noti_muni), size=.15, show.legend = TRUE) +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\ninfec <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Probable infections municipality\")+\n  geom_sf( aes(fill=infec_muni), size=.15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\nresi <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Residence municipality\")+\n  geom_sf( aes(fill=resi_muni), size=.15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\nhosp <- ggplot(allmuni) +\n  ggtitle(\"Hospitalizations municipality\")+\n  geom_sf( aes(fill=hosp_muni), size=.15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\n#using the patchwork library, the plots can be displayed next to each other\n(noti+infec)/(resi+hosp)\n```\n\nDepending on the aim of the study, different variables can be important. For\nexample, if your work aims to understand the dengue prevalence, the municipality\nof residence is the most suitable. However, if you need to evaluate the\nhealthcare infrastructure, the municipality of hospitalisation could be more\nsuitable.\n\n### *Calculate the incidence*\n\n![](images/idea-03.png){width=\"23\"} Sometimes, having the absolute values is\nhelpful. But other times, the number of dengue cases are highly dependent on the\nnumber of inhabitants and then the incidence is used. The incidence describes\nhow many dengue cases occurred per 100.000 inhabitants.\n\nFor this, the population data needs to be loaded from\n[IBGE](https://www.ibge.gov.br/estatisticas/sociais/populacao/9103-estimativas-de-populacao.html?edicao=31551&t=resultados)\neither manually or using the local function \"get_br_pop_data\" (instructions can\nbe viewed in 0_DownloadData.md).\n\n```{r Dengue_LoadPopulation}\nget_br_pop_data(2015, save=F)\n\nallmuni <-  dplyr::left_join(allmuni, pop_2015[c(\"code_muni\",\"pop\")], by=\"code_muni\")\nallmuni$pop <- as.numeric(allmuni$pop)\n```\n\nThe incidence is then calculated by dividing the dengue cases by the population\nof each municipality and multiplicating it by 100.000.\n\n```{r  Dengue_Incidence, message=FALSE, warning=FALSE}\nallmuni$noti_inc <- allmuni$noti_muni / allmuni$pop * 100000\nallmuni$infec_inc <- allmuni$infec_muni / allmuni$pop * 100000\nallmuni$resi_inc <- allmuni$resi_muni / allmuni$pop * 100000\nallmuni$hosp_inc <- allmuni$hosp_muni / allmuni$pop * 100000\n\n# Population\nggplot2::ggplot(allmuni) +\n  ggtitle(\"Population in Brazil\")+\n  geom_sf( aes(fill = pop), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks,\n                    colours = cols,\n                    values= scales::rescale(breaks))\n\n# Incidence\nbreaks2 <- c(0,5,25,50,100, 250)\nnoti_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of dengue notifications in 2015\")+\n  geom_sf( aes(fill = noti_inc), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\ninfec_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of probable dengue infections in 2015\")+\n  geom_sf( aes(fill = infec_inc), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\nresi_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of residents with dengue in 2015\")+\n  geom_sf( aes(fill = resi_inc), size = .15, show.legend = TRUE)  +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\nhosp_inc <- ggplot2::ggplot(allmuni) +\n  ggtitle(\"Incidence of dengue hospitalizations in 2015\")+\n  geom_sf( aes(fill = hosp_inc), size = .15, show.legend = TRUE) +\n  scale_fill_stepsn(breaks = breaks2,\n                    colours = cols,\n                    values = scales::rescale(breaks2))\n\n(noti_inc+infec_inc)/(resi_inc+hosp_inc)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"github_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"brazil_dengue.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":{"markdown":{"wrap":80}},"theme":"cosmo","title":"Preprocessing Dengue Data","author":"Daniela Luhrsen, Rachel Lowe and Raquel Lana","date":"2022-10-27","editor_options":{"chunk_output_type":"console"},"message":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}